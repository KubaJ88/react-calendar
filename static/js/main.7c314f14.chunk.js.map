{"version":3,"sources":["provider/calendar.provider.jsx","context/sessions/schedule.js","context/sessions/sessions.context.js","components/popup/popup.component.jsx","components/thankyou/thankyou.component.jsx","components/choose-date/choose-date.component.jsx","components/calendar/calendar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CalendarContext","createContext","hidden","subbmit","selectedDate","Date","onDateClick","onClickShowForm","onSubmitChange","CalendarProvider","children","useState","setHidden","submit","setSubmit","setSelectedDate","Provider","value","day","bool","DR_DATA","date","time","free","SessionsContext","Popup","useContext","username","setUsername","email","setEmail","msg","setMsg","className","onSubmit","event","preventDefault","console","log","submitHandler","type","placeholder","id","required","htmlFor","onChange","target","href","onClick","ThankYou","ChooseDate","doctorSession","dataFormated","format","dateinText","times","filter","selectedSlot","setSelectedSlot","map","slots","i","key","clickHandler","CalendarGrid","currentDate","setCurrentDate","today","sessionDate","session","parsedDate","parse","nextMonth","addMonths","prevMonth","subMonths","days","startDate","startOfWeek","push","addDays","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","isSameMonth","isSameDay","dr","freeTime","cells","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c314f14.chunk.js","sourcesContent":["import React, {createContext, useState, useEffect} from 'react';\r\n\r\nexport const CalendarContext = createContext({\r\n\r\n\r\n    hidden: true,\r\n    subbmit: false,\r\n    selectedDate: new Date(),\r\n    onDateClick: () => {},\r\n    onClickShowForm: () => {},\r\n    onSubmitChange: () => {},\r\n\r\n    \r\n    \r\n});\r\n\r\n\r\nconst CalendarProvider = ({children}) => {\r\nconst [hidden, setHidden] = useState(true)\r\nconst [submit, setSubmit] = useState(false)\r\nconst [selectedDate, setSelectedDate] = useState(new Date());\r\n\r\nconst onDateClick = day => {\r\n    setSelectedDate(day);\r\n    }\r\n\r\nconst onClickShowForm = (bool) => {\r\n    setHidden(bool)\r\n};\r\n\r\nconst onSubmitChange = (bool) => {\r\n    setSubmit(bool)\r\n};\r\n\r\nreturn  (<CalendarContext.Provider\r\nvalue={{\r\n    hidden,\r\n    submit,\r\n    onDateClick,\r\n    selectedDate,\r\n    onClickShowForm,\r\n    onSubmitChange\r\n}}\r\n>{children}</CalendarContext.Provider>);\r\n\r\n};\r\n\r\n\r\nexport default CalendarProvider;","const DR_DATA = [\r\n    {\r\n     date: '22/05/2020',\r\n     time: [ {\r\n         time: '9:30',\r\n         free:true\r\n     },\r\n     {\r\n         time:'10:00',\r\n         free:true\r\n     }\r\n         \r\n     ]\r\n \r\n },\r\n {\r\n     date: '18/05/2020',\r\n     time: [ {\r\n         time: '9:30',\r\n         free:true\r\n     },\r\n     {\r\n         time:'10:00',\r\n         free:true\r\n     },\r\n     {\r\n       time:'13:00',\r\n       free:true\r\n   }\r\n         \r\n     ]\r\n \r\n },\r\n ,\r\n {\r\n     date: '20/05/2020',\r\n     time: [ {\r\n         time: '15:30',\r\n         free:false\r\n     },\r\n     {\r\n         time:'16:00',\r\n         free:true\r\n     },\r\n     {\r\n       time:'16:30',\r\n       free:false\r\n   }\r\n         \r\n     ]\r\n \r\n }]\r\n\r\n\r\n export default DR_DATA;","import {createContext} from 'react';\r\nimport DR_DATA from './schedule';\r\n\r\nconst SessionsContext = createContext(DR_DATA);\r\n\r\nexport default SessionsContext;","import React, { useState, useContext, useEffect } from \"react\";\r\nimport './popup.styles.scss';\r\nimport {CalendarContext} from '../../provider/calendar.provider';\r\nimport gsap from \"gsap\";\r\nimport { TimelineLite } from \"gsap/gsap-core\";\r\n\r\n\r\n\r\n\r\n\r\nconst Popup = () => {\r\n\r\n\r\n    const {hidden, onClickShowForm, onSubmitChange} = useContext(CalendarContext);\r\n    const [username, setUsername] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [msg, setMsg] = useState('')\r\n\r\n    \r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        // setSelectedSlot(-1)\r\n        console.log(username, email, msg)\r\n        onClickShowForm(true)\r\n        onSubmitChange(true)\r\n        setUsername('')\r\n        setEmail('')\r\n        setMsg('')\r\n        \r\n        // console.log(hidden)\r\n    }\r\n\r\n    // let t1 =gsap.timeline()\r\n\r\n    \r\n\r\n    // const removeForm = element => {\r\n    //     gsap.to(element, {\r\n    //     duration: 1,\r\n    //     x: '20px',\r\n    //     opacity: 0,\r\n    //       // backgroundColor: 'blue',\r\n    //       ease: \"power2.out\",\r\n    //     onComplete: () => {onClickShowForm(true)}\r\n    //       // repeat: 2,\r\n    //     //   stagger: {\r\n    //     //     amount: 4\r\n    //     //   }\r\n    //     });\r\n    //   };\r\n\r\n    //   const closeForm =  () => {\r\n    //       t1.call(removeForm('.popup'))\r\n    //     //   .isActive()\r\n          \r\n       \r\n    //   }\r\n\r\n\r\n    return (\r\n        // !hidden ? \r\n        <div className='popup'>\r\n            <div className=\"form\">\r\n            <form className='book_session' onSubmit={(event) => submitHandler(event)}>\r\n            <div className='form__group'>\r\n            <input type=\"text\" className=\"form__input\" placeholder=\"Full name\" id=\"name\" required/>\r\n            <label htmlFor=\"name\" className=\"form__label\">Full name</label>\r\n            </div>\r\n            <div className='form__group'>\r\n            <input type=\"email\" className=\"form__input\" placeholder=\"Email\" id=\"email\" required onChange={(event) => setEmail(event.target.value)}/>\r\n            <label htmlFor=\"email\" className=\"form__label\">Email</label>\r\n            </div>\r\n            <div className='form__group'>\r\n            \r\n            <textarea id=\"msg\" className='form__input form__input--textarea' placeholder=\"Describe your problem\" id=\"msg\" rows=\"5\" cols=\"30\"></textarea>\r\n            <label htmlFor=\"msg\" className=\"form__label\" >Describe your problem</label>\r\n            </div>\r\n            {/* <label>\r\n          Pick your favorite flavor:\r\n          <select>\r\n            <option value=\"grapefruit\">Grapefruit</option>\r\n            <option value=\"lime\">Lime</option>\r\n            <option value=\"coconut\">Coconut</option>\r\n            <option value=\"mango\">Mango</option>\r\n          </select>\r\n        </label> */}\r\n            \r\n            <button type='submit' className='form__btn'>Book</button>\r\n            </form>\r\n            \r\n           \r\n\r\n            \r\n                                    \r\n            </div>\r\n                                 \r\n            {/* <button onClick={() => onClickShowForm(true)}>Click Me</button> */}\r\n            <a href=\"#\" className=\"popup__close\" onClick={() => onClickShowForm(true)}>&times;</a>\r\n        </div>\r\n        // : <div>Kuba</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Popup;","import React, {useContext} from 'react';\r\nimport './thankyou.styles.scss';\r\nimport {CalendarContext} from '../../provider/calendar.provider';\r\n\r\nconst ThankYou = () => {\r\n\r\n    const {submit, onSubmitChange} = useContext(CalendarContext);\r\n\r\n    return (\r\n        \r\n        <div className={`background ${submit ? 'background--active' : 'background--disabled' }`}>\r\n        <div className={`background__msg`}>\r\n            \r\n        </div>\r\n        \r\n       <a href=\"#\" className=\"background__close\" onClick={() => \r\n    onSubmitChange(!submit)}>&times;</a>\r\n       <h1 className='background__text'>Thank you.<br></br>You'll recieve confirmation mail soon.</h1>\r\n       </div>\r\n       \r\n\r\n    )\r\n}\r\n\r\n\r\nexport default ThankYou;","import React, { useState, useContext, useEffect } from \"react\";\r\nimport './choose-date.styles.scss';\r\nimport {CalendarContext} from '../../provider/calendar.provider';\r\nimport {format } from \"date-fns\";\r\nimport SessionsContext from '../../context/sessions/sessions.context';\r\nimport Popup from '../popup/popup.component';\r\nimport ThankYou from '../thankyou/thankyou.component';\r\n// import SessionSlots from '../session-slots/session-slots.component';\r\n\r\n\r\n\r\nconst ChooseDate = () => { \r\n\r\n    const {selectedDate, hidden, onClickShowForm} = useContext(CalendarContext);\r\n    // const {selectedDate} = useContext(CalendarContext);\r\n    // console.log(selectedDate)\r\n    const dateFormat = \"dd/MM/yyyy\";\r\n    const doctorSession = useContext(SessionsContext);\r\n    const dataFormated = format(selectedDate, dateFormat)\r\n    const dateinText = format(selectedDate, \"dd MMM yyyy\")\r\n    \r\n\r\n    let times = doctorSession.filter(value => {\r\n        return value.date == dataFormated\r\n    });\r\n\r\n    const [selectedSlot, setSelectedSlot] =  useState(-1);\r\n\r\n   \r\n    const clickHandler = (i) => {\r\n        setSelectedSlot(i)\r\n        onClickShowForm(false)\r\n        // console.log(hidden)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        \r\n        \r\n        <div className=\"choose-date\">\r\n            {/* <ThankYou className='choose-date'/> */}\r\n            <h1>{dateinText}</h1>\r\n            {typeof times[0] ==\"undefined\" ? <div className='choose-date__nothing'>Nothing is free today</div>\r\n            :  \r\n            // <SessionSlots times={times}/>\r\n            <ul className=\"sessions\" >\r\n                {times[0].time.map((slots, i) => {\r\n                    return slots.free ? \r\n                    <li className={`sessions__hour ${selectedSlot === i ? 'active' : \"\"}`}  key={i} onClick={() => clickHandler(i)}>{slots.time} </li> : ''\r\n                })}\r\n              \r\n            </ul>\r\n            }\r\n            {!hidden ? <Popup/> : null}\r\n            \r\n        </div>\r\n\r\n        // : <Popup/>\r\n    )\r\n}\r\n\r\n\r\nexport default ChooseDate;\r\n","import React, { useState, useContext } from \"react\";\r\nimport {format, startOfWeek, addDays, startOfMonth\r\n,endOfMonth,\r\nendOfWeek,\r\nisSameMonth,\r\nparse,\r\nisSameDay,\r\naddMonths,\r\nsubMonths,\r\ntoDate\r\n} \r\nfrom \"date-fns\";\r\nimport './calendar.styles.scss';\r\nimport SessionsContext from '../../context/sessions/sessions.context';\r\nimport {CalendarContext} from '../../provider/calendar.provider';\r\n\r\nconst CalendarGrid = () => {\r\nconst [currentDate, setCurrentDate] = useState(new Date());\r\nconst [today, setToday] = useState(new Date());\r\n// const [selectedDate, setSelectedDate] = useState(new Date());\r\nconst doctorSession = useContext(SessionsContext);\r\nconst {selectedDate, onDateClick} = useContext(CalendarContext)\r\n\r\n\r\n\r\n// const [doctorSession, setDoctorSession] = useState(DR_DATA)\r\nlet sessionDate = doctorSession.map((session) => {\r\n    session.parsedDate = parse(session.date, 'dd/MM/yyyy', new Date())\r\n   //  session.freeTime = session.time.reduce((prev,cur) => {\r\n   //      console.log(prev.free, cur.free)\r\n   //      return prev + cur.free\r\n   //  },false)\r\n    return session\r\n\r\n}\r\n);\r\n\r\n\r\n// console.log(sessionDate)\r\n\r\nconst header = () => {\r\nconst dateFormat = \"MMMM yyyy\";\r\n// console.log(parse(doctorSession, 'dd/MM/yyyy', new Date()))\r\n// console.log(isSameDay(sessionDate[0].parsedDate,selectedDate))\r\n\r\nreturn (\r\n   \r\n   <div className=\"header\">\r\n      <div className=\"header__icon\">\r\n         <div className=\"icon\" onClick={prevMonth}>\r\n            chevron_left\r\n         </div>\r\n      </div>\r\n      <div className=\"header__text\">\r\n         <span>{format(currentDate, dateFormat)}</span>\r\n      </div>\r\n      <div className=\"header__icon\">\r\n         <div className=\"icon\" onClick={nextMonth}>\r\n            chevron_right\r\n         </div>\r\n      </div>\r\n   </div>\r\n   );\r\n};\r\n\r\nconst days = () => {\r\nconst dateFormat = \"EEE\";\r\nconst days = [];\r\nlet startDate = startOfWeek(currentDate);\r\nfor (let i = 0; i < 7; i++) {\r\n      days.push(\r\n         <div className=\"days_format\" key={i}>\r\n         {format(addDays(startDate, i), dateFormat)}\r\n         </div>\r\n      );\r\n   }\r\n   return <div className=\"days\">{days}</div>;\r\n};\r\nconst cells = () => {\r\nconst monthStart = startOfMonth(currentDate);\r\nconst monthEnd = endOfMonth(monthStart);\r\nconst startDate = startOfWeek(monthStart);\r\nconst endDate = endOfWeek(monthEnd);\r\nconst dateFormat = \"d\";\r\nconst rows = [];\r\nlet days = [];\r\nlet day = startDate;\r\nlet formattedDate = \"\";\r\n// console.log(day)\r\nwhile (day <= endDate) {\r\n   for (let i = 0; i < 7; i++) {\r\n   formattedDate = format(day, dateFormat);\r\n   const cloneDay = day;\r\n   // console.log(day)\r\n   // console.log(isSameMonth(day, monthStart) && isSameMonth(day, monthStart) )\r\ndays.push(\r\n\r\n   \r\n    \r\n      <div \r\n       className={`column cell ${!isSameMonth(day, monthStart)\r\n       ? \"disabled\" : isSameDay(day, selectedDate) \r\n       ? \"selected\" : ''}`} \r\n    \r\n       key={day} \r\n       onClick={() => onDateClick((cloneDay))}\r\n       > \r\n       <span className=\"number\">{formattedDate}</span>\r\n       <span className={isSameDay(day, today)? 'today' : ''}></span>\r\n       <div className='session__containter'>\r\n       {sessionDate.map((session) => {\r\n         //  console.log(session)\r\n         \r\n         return session.time.map((dr, i) => {  \r\n           \r\n            return  isSameDay(day, session.parsedDate) && dr.free == true ?  <span className='drsession' key={i}></span> : \r\n            isSameDay(day, session.parsedDate) && dr.free == false ? <span className='drsession--booked' key={i}></span> : ''\r\n         })\r\n      //   return  isSameDay(day, session.parsedDate) && session.time.free != 0 ?  <span className='drsession'></span> : ''\r\n    })}\r\n    {sessionDate.map((session) => {\r\n        return  isSameDay(day, session.parsedDate) && session.freeTime == 0 ?  <span className='drsession-full'></span> : ''\r\n    })}\r\n    </div>\r\n       {/* <span className=\"bg\">{formattedDate}</span> */}\r\n     </div>\r\n     );\r\n   day = addDays(day, 1);\r\n  }\r\nrows.push(\r\n      <div className=\"row\" key={day}> {days} </div>\r\n    );\r\n   days = [];\r\n }\r\n return <div className=\"body\">{rows}</div>;\r\n}\r\nconst nextMonth = () => {\r\n   setCurrentDate(addMonths(currentDate, 1));\r\n};\r\nconst prevMonth = () => {\r\n   setCurrentDate(subMonths(currentDate, 1));\r\n};\r\n// const onDateClick = day => {\r\n// setSelectedDate(day);\r\n// }\r\nreturn (\r\n   <div className=\"calendar\">\r\n      {header()}\r\n      {days()}\r\n      {cells()}\r\n   </div>\r\n  );\r\n};\r\nexport default CalendarGrid;","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport './components/reset/reset.styles.scss';\n// import Calendar from './components/calendar/calendar.component';\nimport ChooseDate from './components/choose-date/choose-date.component';\nimport CalendarGrid from './components/calendar/calendar.component';\nimport ThankYou from './components/thankyou/thankyou.component';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      {/* <Calendar/> */}\n      <CalendarGrid/>\n      <ChooseDate/>\n      <ThankYou/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport CalendarProvider from './provider/calendar.provider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CalendarProvider>\n    <App />\n    </CalendarProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}